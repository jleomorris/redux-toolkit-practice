import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';
import type { RootState } from '../../app/store';

// here we are typing the types for the state
export type randomQuoteState = {
  data: { quote: string };
  pending: boolean;
  error: boolean;
};

const initialState: randomQuoteState = {
  data: { quote: 'The No.1 source for Chuck Norris quotes' },
  pending: false,
  error: false,
};

// This action is what we will call using the dispatch in order to trigger the API call.
export const getRandomQuote = createAsyncThunk(
  'randomQuotes/chuck',
  async () => {
    const response = await axios.get('https://api.chucknorris.io/jokes/random');

    return response.data;
  }
);

export const randomQuoteSlice = createSlice({
  name: 'chuck',
  initialState,
  reducers: {
    // leave this empty here
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
  // Since this is an API call we have 3 possible outcomes: pending, fulfilled and rejected. We have made allocations for all 3 outcomes.
  // Doing this is good practice as we can tap into the status of the API call and give our users an idea of what's happening in the background.
  extraReducers: (builder) => {
    builder
      .addCase(getRandomQuote.pending, (state) => {
        state.pending = true;
      })
      .addCase(getRandomQuote.fulfilled, (state, { payload }) => {
        // When the API call is successful and we get some data,the data becomes the `fulfilled` action payload
        state.pending = false;
        // state.data = payload;
        state.data.quote = payload.value;
        // debugger;
      })
      .addCase(getRandomQuote.rejected, (state) => {
        state.pending = false;
        state.error = true;
      });
  },
});

// Export state to hook into in components
export const selectQuote = (state: RootState) => state.randomQuote;

// Export reducer so it can be added to the store
export default randomQuoteSlice.reducer;
